(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'fields_4virtual' is not defined"
p3
sS'layer'
p4
S'/home/jurgis/dev/web2py_src/applications/app/controllers/plugin_w2ui_grid.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nfrom plugin_search_form.search_form import SearchField, SearchForm\nfrom plugin_joins_builder.joins_builder import build_joins_chain \nfrom plugin_w2ui_grid.w2ui_grid import w2ui_grid_data  , w2ui_colname, w2ui_colname_decode\nfrom plugin_w2ui_grid.w2ui_grid import inject_attrs\n\n\nfrom gluon.sqlhtml import represent\nfrom gluon.storage import Storage\nfrom pydal.objects import Field, Expression, Table\n\nfrom searching import search_form\nfrom lib.w2ui import make_orderby, save_export, serialized_lists\nfrom applications.app.modules.searching import search_form\n\n\n"""\nTESTS for "w2ui_grid"  \n"""\n\ndef populate_users():\n    from gluon.contrib.populate import populate\n    populate(db[\'auth_user\'],5)  ; db.commit()\n\ndef add_user():\n    return "test..."\n    \ndef test():  \n    \n    cid = request.function \n    data_name = \'user\' # for checking permissions, etc..\n\n    # SEARCH FORM\n    search = SearchForm( \n        [ SearchField( db.auth_user.email ), SearchField( db.auth_user.first_name ) ],\n        formstyle=\'table3cols\',\n        form_factory = lambda *a, **kw:  search_form(cid, *a, **kw), # pass cid to form facotry\n        \n        # w2ui\n        _name = \'{0}__form\'.format(cid),\n        _action = \'javascript:w2ui__grid("{0}");\'.format(cid)\n    )\n\n    # GRID COLUMNS MODEL -- fields_4columns\n\n    # Virtual Field\n    reversed_name =  inject_attrs(\n                        # db.auth_user.reversed_name =  Field.Virtual(\'reversed_name\',  \n                        Field.Virtual(\'reversed_name\',  # it can be anonymous, but for SQLFORM.grid it requires table_name\n                                lambda row, ctx=None: row.auth_user.first_name[::-1]\n                        ),\n                        needs_data = [db.auth_user.first_name ], \n                        #joins = None, left = None\n                      ) \n                               \n    \n    # Expressions \n    # oversimplified Expression -- just a field\n    name = inject_attrs( db.auth_user.first_name, label="field as expression", _override=True) \n\n    # robust expr\n    full_name = db.auth_user.first_name+" "+db.auth_user.last_name # Expression\n    full_name.name = "full_name" # or could use inject_attrs \n    full_name.label = "Full name" # or could use inject_attrs \n    full_name.represent = lambda val, row: ("Mrs. " if row[db.auth_user.first_name].endswith(\'a\') else "Mr. ") +val  # demo of represent injection\n    #full_name.join = None \n    \n    fields_4columns=[   \n                        db.auth_user.id,\n                        db.auth_user.last_name,\n                        reversed_name,\n                        name,\n                        full_name,\n                        inject_attrs( db.auth_user.email, represent4export=lambda val: val.upper() ),\n                    ] \n\n    def whole_page():\n        response.view = \'plugin_w2ui_grid/w2ui_grid.html\'\n        \n        # some workarounds for grand core stuff\n        response.subtitle  = "test  w2ui_grid"\n        response.menu = []\n        \n        return dict(        \n            cid = cid,\n            form = search.form,\n            w2grid_columns =  [\n                 {\'field\': w2ui_colname(f), \'caption\': f.label, \'size\': "100%", \'sortable\': isinstance(f, (Field, Expression)), \'resizable\': True}\n                 for f in fields_4columns \n             ],\n            grid_function = request.function,       # or specify other...     \n            data_name = data_name , # request.controller could be default       \n            context = request.controller +\'_\'+ data_name,\n\n            w2grid_sort = [  {\'field\': w2ui_colname(db.auth_user.email), \'direction\': "asc"} ]\n        )\n     \n    # @auth.requires_signature()\n    def grid_data():  # uses search.query  and   fields_4columns \n        \n        # optional\n        def after_select_before_render(rows, cmd=None, ctx=None):\n            return {}  # return new stuff for context  -- might change\n                     \n        grid_kwargs_from_search = { key: search.get(key) for key in \'left join groupby having\'.split() }\n        \n        return w2ui_grid_data(\n                        search.query,   \n                        fields_4columns=fields_4columns, \n                        after_select_before_render=after_select_before_render,\n                        data_name=data_name, \n                        **grid_kwargs_from_search \n                        )\n                  \n    if request.vars._grid == \'True\':  \n        return grid_data()\n    else:\n        return whole_page()\n\n\n\n# @auth.requires_permission(\'list\', \'user\')\ndef testgrand_users():\n    from plugin_search_form.search_form import SearchField, SearchForm\n    from plugin_joins_builder.joins_builder import build_joins_chain  # uses another grand plugin\n\n    cid = request.function \n    data_name = \'user\' # for checking permissions, etc..\n\n    def my_grand_search_form(*fields, **kwargs):\n        from applications.app.modules.searching import search_form as grand_search_form\n        return grand_search_form(cid, *fields, **kwargs)\n            \n\n    search = SearchForm(  # jurgio plugin\'as\n        [ SearchField( db.auth_user.email ), SearchField( db.auth_user.first_name ) ],\n        formstyle=\'table3cols\',\n        form_factory = my_grand_search_form,\n        \n        # w2ui\n        _name = \'{0}__form\'.format(cid),\n        _action = \'javascript:w2ui__grid("{0}");\'.format(cid)\n\n    )\n    \n    # def update_records_with_virtual_info(rows, records, cmd ):\n        # for row, rec in zip(rows, records ):\n            # row[\'virtual_color\'] = "BLAH " + row.color\n    \n    def after_select_before_render(rows, cmd=None, ctx=None):\n        \n        return {}  # return new objects for context\n        \n    \n        \n    # FIELDS \n    # fields_4virtual = []  -->> needs_data\n\n    db.auth_user.reversed_name =  Field.Virtual(\'reversed_name\', \n                                                lambda row, ctx=None: row.auth_user.first_name[::-1]\n#                                                 , table_name = "auth_user"  # not really necessary\n\n                                                );\n    # fields_4virtual.extend([db.auth_user.first_name ])\n\n    db.auth_user.reversed_name  .needs_data =  [db.auth_user.first_name ]\n\n    fields_4columns=[   \n                        db.auth_user.id,\n                        # db.auth_user.username,\n                        db.auth_user.last_name,\n                        db.auth_user.reversed_name,\n                        db.auth_user.email ,\n                        # db.auth_user.active,\n                        # db.auth_user.type  ,\n                        # db.auth_user.data_level ,\n                    ] \n    \n                \n    """\n    select_fields | select_expr\n    show_fields | show_expr\n    ghost_fields | ghost_expr\n    """\n    \n                 \n    if request.vars._grid == \'True\':  # GRID\n        grid_kwargs = { key: search.get(key) for key in \'left join groupby having\'.split() }\n        represent4export = { \n            # w2ui_colname(db.auth_user.active): lambda value: represent_boolean(value, html=False)\n        } \n        stuff = w2ui_grid_data(\n                        search.query,   \n                        fields_4columns=fields_4columns, \n                        fields_4virtual=fields_4virtual, \n                        represent4export=represent4export, \n                        after_select_before_render=after_select_before_render,\n                        data_name=data_name, \n                        **grid_kwargs \n                        )\n#         response.view = "generic.load"\n        return stuff\n          \n    else:                \n        response.view = \'plugin_w2ui_grid/w2ui_grid.html\'\n        \n        # some workarounds for grand core stuff\n        response.subtitle  = "test  w2ui_grid"\n        response.menu = []\n        \n        context = dict(        \n            cid = cid,\n            form = search.form,\n            w2grid_columns =  [            \n                 {\'field\': w2ui_colname(f), \'caption\': f.label, \'size\': "100%", \'sortable\': isinstance(f, (Field, Expression)), \'resizable\': True}\n                 # for f in fields_4columns +fields_ghosts  # TODO:  impacts field order -- fields ghosts should go in fields_4cols \n                 for f in fields_4columns # TODO:  impacts field order -- fields ghosts should go in fields_4cols \n             ],\n            grid_function = request.function,       # or \'users_grid\'     \n            data_name = data_name , # request.controller could be default       \n            # w2grid_sort = [  {\'field\': w2ui_colname(db.auth_user.username), \'direction\': "asc"} ]\n            w2grid_sort = [  {\'field\': w2ui_colname(db.auth_user.email), \'direction\': "asc"} ]\n            # ,dbg = response.toolbar()\n        )\n        return context     \n\nresponse._vars=response._caller(testgrand_users)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/jurgis/dev/web2py_src/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/jurgis/dev/web2py_src/applications/app/controllers/plugin_w2ui_grid.py", line 227, in <module>\n  File "/home/jurgis/dev/web2py_src/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/jurgis/dev/web2py_src/applications/app/controllers/plugin_w2ui_grid.py", line 195, in testgrand_users\n    fields_4virtual=fields_4virtual,\nNameError: global name \'fields_4virtual\' is not defined\n'
p11
s.